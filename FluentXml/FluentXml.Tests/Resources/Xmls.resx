<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="fluentxml_xml" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;FluentXml&gt;
  &lt;Author Id="10"&gt;Ricardo Alves&lt;/Author&gt;
  &lt;PackageName&gt;FluentXml&lt;/PackageName&gt;
  &lt;Description&gt;This library is awesome =D&lt;/Description&gt;
&lt;/FluentXml&gt;</value>
  </data>
  <data name="movies_2016_xml" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;Movies&gt;
  &lt;Total&gt;3&lt;/Total&gt;
  &lt;Year&gt;2016&lt;/Year&gt;
  &lt;MoviesList&gt;
    &lt;Movie&gt;
      &lt;Name&gt;Justin Timberlake + The Tennessee Kids&lt;/Name&gt;
      &lt;Description&gt;Jonathan Demme's acclaimed career may include numerous beloved dramas and comedies—from Something Wild and Married to the Mob to The Silence of the Lambs, Philadelphia, and Rachel Getting Married—but he's also the world's foremost music-concert documentarian. In the grand tradition of Stop Making Sense and Neil Young: Heart of Gold, Justin Timberlake + The Tennessee Kids is a thrilling showstopper focused on its headliner as he completes his two-year 20/20 Experience World Tour with two final shows at Las Vegas' MGM Grand (in January 2015) alongside his enormous backing band, the Tennessee Kids. Demme captures Timberlake's multifaceted talents in a collection of rousing greatest-hits numbers, which place a premium on in-the-moment artistry. In the way his camera pans in long unbroken takes between Timberlake and his fellow on-stage singers, guitarists, keyboardists and horn players (as well as frames him amidst a sea of adoring arena fans) Demme subtly celebrates the joyous collaborative spirit that guides Timberlake's infectious shows—and elevates him above his pop-star peers.&lt;/Description&gt;
    &lt;/Movie&gt;
    &lt;Movie&gt;
      &lt;Name&gt;Kill Zone 2&lt;/Name&gt;
      &lt;Description&gt;Don't worry if you haven't seen the 2005 precursor to this Hong Kong-Chinese import (also known as SPLII: A Time for Consequences)—aside from their titles, the two films share no relationship. And don't worry if you can't follow its myriad crime-saga plot strands, which involves a dying Hong Kong gangster (Louis Koo) who sells organs on the black market and plans to kill his brother so he can steal his heart, a Hong Kong undercover cop (Wu Jing) intent on infiltrating this kingpin's gang, and a Thailand prison guard (Tony Jaa) trying to save his daughter who is dying of leukemia. What matters here is that director Cheang Pou-soi's film features the finest hand-to-hand skirmishes of the year, with Wu Jing demonstrating deft martial-arts skills and Jaa—he of Ong-Bak: The Thai Warrior fame—bringing the concussive thunder via his trademark elbow drops and flying knee attacks, which peak with him leaping, knees first, through the windshield of a moving bus. The film's melodrama and comedy (including a subplot involving a Down's Syndrome-afflicted teen texting with a dying child via emojis) are overcooked, but Jaa and Jing's fighting prowess make this a must-see for genre aficionados.&lt;/Description&gt;
    &lt;/Movie&gt;
    &lt;Movie&gt;
      &lt;Name&gt;Ouija: Origin of Evil&lt;/Name&gt;
      &lt;Description&gt;Just about everybody agreed that 2014's Ouija, based on the popular contact-the-dead board game, was a dud. But this Halloween season's follow-up, Origin of Evil, is an altogether different beast—a sterling '60s-set period piece that's only loosely related to its predecessor, and one that manufactures terror by first making one care about its well-drawn characters. In this case, those are a mother and two daughters who, while running a séance scam out of their home, wind up in real supernatural trouble when the youngest of their clan (Lulu Wilson) makes contact with what she initially believes is the spirit of her dead father. Another superb chiller from director Mike Flanagan (Oculus, Hush)—mainstream horror's best new filmmaker—about the peril that can come from grieving lost loved ones, this stylish work is a throwback in terms of not only its setting, but also its preference for hold-your-breath suspense and unforgettable otherworldly imagery over cheap scare tactics&lt;/Description&gt;
    &lt;/Movie&gt;
  &lt;/MoviesList&gt;
  &lt;Author&gt;
	&lt;Name&gt;Ricardo Alves&lt;/Name&gt;
  &lt;/Author&gt;
&lt;/Movies&gt;</value>
  </data>
</root>